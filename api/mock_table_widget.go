// Code generated by mockery v2.6.0. DO NOT EDIT.

package api

import (
	list "github.com/ambientsound/visp/list"
	mock "github.com/stretchr/testify/mock"
)

// MockTableWidget is an autogenerated mock type for the TableWidget type
type MockTableWidget struct {
	mock.Mock
}

// ColumnNames provides a mock function with given fields:
func (_m *MockTableWidget) ColumnNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetVisibleBoundaries provides a mock function with given fields:
func (_m *MockTableWidget) GetVisibleBoundaries() (int, int) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *MockTableWidget) List() list.List {
	ret := _m.Called()

	var r0 list.List
	if rf, ok := ret.Get(0).(func() list.List); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(list.List)
		}
	}

	return r0
}

// PositionReadout provides a mock function with given fields:
func (_m *MockTableWidget) PositionReadout() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ScrollViewport provides a mock function with given fields: _a0, _a1
func (_m *MockTableWidget) ScrollViewport(_a0 int, _a1 bool) {
	_m.Called(_a0, _a1)
}

// SetColumns provides a mock function with given fields: _a0
func (_m *MockTableWidget) SetColumns(_a0 []string) {
	_m.Called(_a0)
}

// SetList provides a mock function with given fields: _a0
func (_m *MockTableWidget) SetList(_a0 list.List) {
	_m.Called(_a0)
}

// Size provides a mock function with given fields:
func (_m *MockTableWidget) Size() (int, int) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}
